AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  dinner-optimizer

  Sample SAM Template for dinner-optimizer

Parameters:
  StoredRecipesBucketName:
    Type: String
    Description: Bucket where recipes from Paprika are stored

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    MemorySize: 128

Resources:
  MenuSuggesterFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: menu_suggester/src/menu_suggester/
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 90
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserResponseTable
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: "*"
        - S3ReadPolicy:
            BucketName: !Ref StoredRecipesBucketName
      Environment:
        Variables:
          PAPRIKA_RECIPES_BUCKET: !Ref StoredRecipesBucketName
      Architectures:
        - x86_64
      Tags:
        Project: DinnerOptimizer
      Events:
        ComplexScheduleEvent:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: cron(0 21 ? * SAT *)
            ScheduleExpressionTimezone: UTC
            # RetryPolicy:
            #   MaximumRetryAttempts: 5
            #   MaximumEventAgeInSeconds: 300
            # DeadLetterConfig:
            #   Type: SQS

  UpcomingReminderFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: upcoming_reminder/src/upcoming_reminder/
      Handler: app.lambda_handler
      Runtime: python3.11
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: "*"
        - DynamoDBCrudPolicy:
            TableName: !Ref UserResponseTable
      Environment:
        Variables:
          OPENAI_API_KEY: Defined in local environment
          SLACK_BOT_TOKEN: Defined in local environment
      Architectures:
        - x86_64
      Tags:
        Project: DinnerOptimizer
      Events:
        MorningTrigger:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: cron(0 16 ? * SAT *)
            ScheduleExpressionTimezone: UTC

  UserResponseRecorderFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: user_response_recorder/src/user_response_recorder/
      Handler: app.lambda_handler
      Runtime: python3.11
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserResponseTable
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: "*"
        - LambdaInvokePolicy:
            FunctionName: !Ref MenuSuggesterFunction
      Environment:
        Variables:
          MENU_SUGGESTER_LAMBDA_ARN: !GetAtt MenuSuggesterFunction.Arn
      Architectures:
        - x86_64
      Events:
        SQSEventMessage:
          Type: SQS
          Properties:
            Queue: !GetAtt UserResponseQueue.Arn
            BatchSize: 1
      Tags:
        Project: DinnerOptimizer

  UserResponseQueue:
    Type: AWS::SQS::Queue

  UserResponseTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserResponseTable
      AttributeDefinitions:
        - AttributeName: Week
          AttributeType: S
      KeySchema:
        - AttributeName: Week
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      # Ignored due to on-demand billing mode
      ProvisionedThroughput:
        ReadCapacityUnits: 0
        WriteCapacityUnits: 0

  DispatcherSQSAPIRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SqsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:*
                Resource: "*"

  UserResponseApiMethod:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        openapi: 3.0.0
        info:
          title: Dinner Optimizer Slack event API
          description: This API handles a route with a POST body to be placed on an SQS queue
          contact:
            email: matthew.unrath@gmail.com
          version: 1.0.0
        paths:
          /user_response:
            post:
              summary: Ingests messages from users
              description: "Places an event on an SQS queue for processing"
              operationId: slackEvent
              requestBody:
                description: The message or event to push onto queue for processing
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/SlackEvent"
              responses:
                "200":
                  description: Event post successfully placed on queue for handling
                "400":
                  description: Bad Request
                "500":
                  description: Server Error
              x-amazon-apigateway-integration:
                credentials: !GetAtt DispatcherSQSAPIRole.Arn
                httpMethod: POST
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${UserResponseQueue.QueueName}"
                responses:
                  default:
                    statusCode: 200
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                requestTemplates:
                  application/json: "Action=SendMessage&MessageBody=$input.body"
                passthroughBehavior: never
                type: aws

        components:
          schemas:
            SlackEvent:
              type: object

  PaprikaFetcherFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: paprika_fetcher/src/paprika_fetcher/
      Handler: app.lambda_handler
      Runtime: python3.11
      Policies:
        - S3WritePolicy:
            BucketName: !Ref StoredRecipesBucketName
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: "*"
      Environment:
        Variables:
          BUCKET_NAME: !Ref StoredRecipesBucketName
      Architectures:
        - x86_64
      Tags:
        Project: DinnerOptimizer
      Events:
        MorningTrigger:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: cron(0 13 ? * SAT *)
            ScheduleExpressionTimezone: UTC
# Outputs:
# ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
# Find out more about other implicit resources you can reference within SAM
# https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
# HelloWorldApi:
#   Description: "API Gateway endpoint URL for Prod stage for Hello World function"
#   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
# HelloWorldFunction:
#   Description: "Hello World Lambda Function ARN"
#   Value: !GetAtt HelloWorldFunction.Arn
# HelloWorldFunctionIamRole:
#   Description: "Implicit IAM Role created for Hello World function"
#   Value: !GetAtt HelloWorldFunctionRole.Arn
